name: CI build

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

env:
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04/Release.key"
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04"

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
      - unlabeled
    branches:
      - main
      - v[0-9]+
      - v[0-9]+.[0-9]+
      - cryostat-v[0-9]+.[0-9]+

jobs:
  check-before-build:
    runs-on: ubuntu-latest
    steps:
    - name: Fail if safe-to-test is not applied
      if: github.repository_owner == 'cryostatio' && (!contains(github.event.pull_request.labels.*.name, 'safe-to-test'))
      run: exit 1

  build-core:
    runs-on: ubuntu-latest
    outputs:
      core_version: ${{ steps.get_core_version.outputs.core_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    - id: get_core_version
      run: |
        echo "core_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
        echo "name=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_OUTPUT
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
    - run: mvn -B -U clean install

  build-libcryostat:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - run: cd libcryostat
    - uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
    - run: mvn -B -U clean install

  build-cryostat:
    needs: [build-core]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['17']
    env:
        cache-name: cache-yarn
    name: Build Java ${{ matrix.java }}
    permissions:
        packages: write
        contents: read
        pull-requests: write
        statuses: write
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    - uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/cryostat
        ref: main
        submodules: true
        fetch-depth: 0
    - uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    - name: maven-settings
      uses: s4u/maven-settings-action@v2
      with:
        servers: '[{"id": "github", "username": "dummy", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
        githubServer: false
    - run: git submodule init && git submodule update
    - name: Cache yarn packages
      uses: actions/cache@v3
      with:
        path: "./src/main/webui/.yarn/cache"
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Initialize web assets
      run: |
        cd src/main/webui
        yarn install && yarn yarn:frzinstall
        cd -
    - name: Install podman v4
      run: |
        echo "deb $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list
        curl -fsSL $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg > /dev/null
        sudo apt -y purge podman
        sudo apt update && sudo apt -y install podman
    - name: Emulate docker with podman
      run: |
        mkdir -p $HOME/.bin
        cat <(echo '#!/usr/bin/env bash') <(echo 'exec podman "$@"') > $HOME/.bin/docker
        chmod +x $HOME/.bin/docker
        echo "PATH=$HOME/.bin:$PATH" >> "$GITHUB_ENV"
    - name: Start Podman API
      run: systemctl --user enable --now podman.socket
    - name: Set DOCKER_HOST environment variable
      run: echo "DOCKER_HOST=unix:///run/user/$(id -u)/podman/podman.sock" >> "$GITHUB_ENV"
    - name: Build cryostat
      run: ./mvnw -B -U -Dio.cryostat.core.version=${{ needs.build-core.outputs.core_version }} clean verify
      continue-on-error: ${{ matrix.java != '17' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Debug podman images
      run: podman images
    - name: Save cryostat image
      run: podman save -o cryostat.tar --format oci-archive quay.io/cryostat/cryostat:latest
    - uses: actions/upload-artifact@v3
      with:
        name: cryostat
        path: ${{ github.workspace }}/cryostat.tar

  push-to-ghcr:
    runs-on: ubuntu-latest
    needs: [build-cryostat]
    strategy:
      matrix:
        java: ['17']
    outputs:
      amd64_image: ${{ steps.cryostat_amd64_image.outputs.image }}

    permissions:
        packages: write
    steps:
    - name: Download cryostat artifact
      uses: actions/download-artifact@v3
      with:
        name: cryostat
    - name: Load cryostat image
      run: podman load -i cryostat.tar
    - name: Tag cryostat image
      run: podman tag cryostat:latest ghcr.io/${{ github.repository_owner }}/cryostat-core:pr-${{ github.event.number }}-${{ github.event.pull_request.head.sha }}-linux-java${{ matrix.java }}
    - name: Push PR test image to ghcr.io
      id: push-cryostat-to-ghcr
      uses: redhat-actions/push-to-registry@v2
      with:
        image: cryostat-core
        tags: pr-${{ github.event.number }}-${{ github.event.pull_request.head.sha }}-linux-java${{ matrix.java }}
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.event.pull_request.user.login }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: store cryostat images as output
      id: cryostat_amd64_image
      run: echo "image=${{ steps.push-cryostat-to-ghcr.outputs.registry-path }}" >> "$GITHUB_OUTPUT"

  comment-image:
    runs-on: ubuntu-latest
    needs: [push-to-ghcr]
    env:
      amd64_image: ${{ needs.push-to-ghcr.outputs.amd64_image }}

    permissions:
      pull-requests: write
    steps:
    - name: Create markdown table
      id: md-table
      uses: petems/csv-to-md-table-action@v3.0.0
      with:
        csvinput: |
          ARCH, IMAGE
          amd64, ${{ env.amd64_image }}

    - uses: thollander/actions-comment-pull-request@v2
      with:
        message: |-
          ${{ steps.md-table.outputs.markdown-table }}

          To run smoketest:
          ```
          CRYOSTAT_IMAGE=${{ env.amd64_image }} bash smoketest.bash
          ```
