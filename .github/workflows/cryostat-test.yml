name: Cryostat Test

concurrency:
  group: ci-${{ github.run_id }}
  cancel-in-progress: true

on:
  issue_comment:
    types: [created]

jobs:
  check-before-build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'cryostatio' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/build_test')
    permissions:
      pull-requests: write
    steps:
    - name: Show warning if permission is denied
      if: |
        !(github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER')
        && (!contains(github.event.issue.labels.*.name, 'safe-to-test') || github.event.issue.user.name != github.event.comment.user.name)
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: |-
          You do not have permission to run the /build_test command. Please ask @cryostatio/reviewers
          to resolve the issue.
    - name: Fail if command permission is denied
      if: |
        !(github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER')
        && (!contains(github.event.issue.labels.*.name, 'safe-to-test') || github.event.issue.user.name != github.event.comment.user.name)
      run: exit 1
    - name: React to comment
      uses: actions/github-script@v4
      with:
        script: |
            const {owner, repo} = context.issue
            github.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "+1",
            });

  checkout-branch:
    runs-on: ubuntu-latest
    needs: [check-before-build]
    outputs:
      PR_head_ref: ${{ fromJSON(steps.comment-branch.outputs.result).ref }}
      PR_head_sha: ${{ fromJSON(steps.comment-branch.outputs.result).sha }}
      PR_num: ${{ fromJSON(steps.comment-branch.outputs.result).num }}
      PR_repo: ${{ fromJSON(steps.comment-branch.outputs.result).repo }}
    permissions:
      pull-requests: read
    steps:
    - uses: actions/github-script@v4
      id: comment-branch
      with:
        script: |
          const result = await github.pulls.get ({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          })
          return { repo: result.data.head.repo.full_name, num: result.data.number, sha: result.data.head.sha, ref: result.data.head.ref }

  cryostat-test:
    runs-on: ubuntu-latest
    needs: [checkout-branch]
    permissions:
      statuses: write
      pull-requests: write
      packages: read
    env:
      build_arch: 'amd64'
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/cryostat
        ref: main
        submodules: true
        fetch-depth: 0
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: maven-settings
      uses: s4u/maven-settings-action@v2
      with:
        githubServer: true
    - name: ghcr login
      uses: redhat-actions/podman-login@v1
      with:
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.event.comment.user.login }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: pull cryostat image
      id: pull-image
      run: podman pull ghcr.io/${{ github.repository_owner }}/cryostat-core:pr-${{ needs.checkout-branch.outputs.PR_num }}-${{ needs.checkout-branch.outputs.PR_head_sha }}-linux-${{ env.build_arch }}
    - name: tag cryostat image
      run: podman tag ghcr.io/${{ github.repository_owner }}/cryostat-core:pr-${{ needs.checkout-branch.outputs.PR_num }}-${{ needs.checkout-branch.outputs.PR_head_sha }}-linux-${{ env.build_arch }} quay.io/cryostat/cryostat
    - name: Run integration tests
      run: bash repeated-integration-tests.bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Print itest logs
      if: failure()
      run: ls -1dt target/cryostat-itest-*.log | head -n1 | xargs cat
    - name: Print itest container logs
      if: failure()
      run: ls -1dt target/cryostat-*.server.log | head -n1 | xargs cat
    - name: Add workflow result as comment on PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const name = '${{ github.workflow	}}';
          const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          const success = '${{ job.status }}' === 'success';
          const body = `${name}: ${success ? 'All tests pass ✅' : 'At least one test failed ❌'}\n${url}`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })
    - name: Leave a comment on pull failure
      uses: actions/github-script@v6
      if: always() && steps.pull-image.outcome != 'success'
      with:
        script: |
          const body = `Image does not exist! Please wait for the initial build and push to complete before using \`/build_test\` command.`;
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })
    - name: Set latest commit status as ${{ job.status }}
      uses: myrotvorets/set-commit-status-action@master
      if: always()
      with:
        sha: ${{ needs.checkout-branch.outputs.PR_head_sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
